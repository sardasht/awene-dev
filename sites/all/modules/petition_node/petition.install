<?php

/**
* @file
* Installs the petition module
*/

/**
 * Implementation of hook_schema().
 */
function petition_schema() {
  $schema = array();
  $schema['petition'] = array(
    'description' => t('Table for storing additional properties for petition nodes.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The node identifier of a petition'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'pccheck' => array(
        'description' => t('Enable the Checking a country entered against the country infered from the ipadress'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'pcrest' => array(
        'description' => t('Enable geographic restrictions in the petitions'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'pcountry' => array(
        'description' => t('Authorized countries for the petition'),
        'type' => 'text',
        'default' => NULL,
      ),
      'pemail' => array(
        'description' => t('Email address to receive results'),
        'type' => 'text',
        'default' => NULL,
      ),
      'pfreq' => array(
        'description' => t('Frequency to receive emails'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'poptfields' => array(
        'description' => t('Optional fields for the petition'),
        'type' => 'text',
        'default' => NULL,
      ),
      'reqfields' => array(
        'description' => t('Required fields for the petition'),
         'type' => 'text',
        'default' => NULL,
      ),
      'emailsubject' => array(
        'description' => t('Customized email subject to the signer'),
        'type' => 'text',
        'default' => NULL,
      ),
      'emailbody' => array(
        'description' => t('Customized email body to the signer'),
        'type' => 'text',
        'default' => NULL,
      ),
      'presfields' => array(
        'description' => t('Result fields to show'),
        'type' => 'text',
        'default' => NULL,
      ),
      'display_mode' => array(
        'description' => t('The display mode of the signatures'),
        'type' => 'text',
        'default' => NULL,
      ),
      'signatures' => array(
        'description' => t('The number of signatures to the petition'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'activation' => array(
        'description' => t('Whether the signature form is activated or not'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '1',
      ),
      'inactivation_message' => array(
        'description' => t('The message displayed instead of the signature form if inactive'),
        'type' => 'text',
        'default' => NULL,
      ),
      'limit_date' => array(
        'description' => t('Unix timetstamp of the limit date for the campaign setting'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'signature_goal' => array(
        'description' => t('Signature goal for the campaign setting'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'campaign_settings' => array(
        'description' => t('campaign mode'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'auto_inactivation' => array(
        'description' => t('auto inactivation mode'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      
      
    ),
    'primary key' => array('nid')
  );
    
  $schema['petition_signatures'] = array(
    'description' => t('Table for storing the signatures.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The node identifier of a petition signature'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'cid' => array(
        'description' => t('The signature identifier of a petition signature'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'name' => array(
        'description' => t('The name in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'firstname' => array(
        'description' => t('The firstname in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'title' => array(
        'description' => t('The description in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'address' => array(
        'description' => t('The address in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'zip' => array(
        'description' => t('The zip code in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'town' => array(
        'description' => t('The town in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'country' => array(
        'description' => t('The country in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'tel' => array(
        'description' => t('The tel in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'email' => array(
        'description' => t('The email in the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'remote_address' => array(
        'description' => t('The remote address in the signature. Transformed into country code upon confirmation'),
        'type' => 'text',
        'default' => NULL,
      ),
      'date' => array(
        'description' => t('The date of the signature'),
        'type' => 'text',
        'default' => NULL,
      ),
      'hash' => array(
        'description' => t('The hash for the confirmation'),
        'type' => 'text',
        'default' => NULL,
       ),
      'confirmed' => array(
        'description' => t('Whether the signature is confirmed or not'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'position' => array(
        'description' => t('The position of a signature within a given petition'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'canbe_informed' => array(
        'description' => t('Whether the petitioner accepts to be informed aout the petition campaign'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'language' => array(
        'description' => t('The language of the signed petition'),
        'type' => 'text',
        'default' => NULL,
      )
    ),
   'primary key' => array('cid')
  );
    
  $schema['petition_translation'] = array(
    'description' => t('Table for storing the translations of email subjects and body.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The node identifier of the translation'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'tnid' => array(
        'description' => t('The node identifier of original version'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'language' => array(
        'description' => t('The language code of the translation'),
        'type' => 'text',
        'default' => NULL,
      ),
      'tsubject' => array(
        'description' => t('The translated subject'),
        'type' => 'text',
        'default' => NULL,
      ),
      'tbody' => array(
        'description' => t('The translated body'),
        'type' => 'text',
        'default' => NULL,
      )
    ),
    'primary key' => array('nid'),
   );
    
    
  return $schema;

}

/**
*Implementation of hook_install
*/

function petition_install() {
  db_query("UPDATE {system} SET weight = -1 WHERE name='petition' AND type='module'");
  drupal_install_schema('petition');
}

/**
*Implementation of hook_uninstall
*/
function petition_uninstall() {
  watchdog("petition", "Removing petition module.");
	
  //unset petition variables
  variable_del("petition_country_check");
  variable_del("petition_country_restriction");
  variable_del("petition_signature_fields_form");
  variable_del("petition_report_fields_fields");
  variable_del("petition_emailsubject_to_maintainer");
  variable_del("petition_emailbody_to_maintainer");
  variable_del("petition_signature_number");
	
  // Drop tables.
  drupal_uninstall_schema('petition');
        
  watchdog("petition", "Petition module removed");
}

/**
*Implementation of hook_update_N
*/

function petition_update_6001() {
  $ret = array();
  db_change_field($ret, 'petition', 'image', 'display_mode', array(
        'description' => t('The display mode of the signatures'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '1',
      ));
   db_add_field($ret, 'petition', 'signatures', array(
        'description' => t('The number of signatures to the petition'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ));
    db_add_field($ret, 'petition_signatures', 'position', array(
        'description' => t('The position of a signature within a given petition'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ));
      update_signature_count();
  return $ret;
}


function petition_update_6002() {
  $ret = array();
  db_change_field($ret, 'petition', 'display_mode', 'display_mode', array(
        'description' => t('The display mode of the signatures'),
        'type' => 'text',
        'default' => NULL,
      ));
   db_add_field($ret, 'petition', 'activation', array(
       'description' => t('Whether the signature form is activated or not'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '1',
      ));
    db_add_field($ret, 'petition', 'inactivation_message', array(
         'description' => t('The message displayed instead of the signature form if inactive'),
        'type' => 'text',
        'default' => NULL,
      ));
  update_signature_count();
  return $ret;
}


function petition_update_6005() {
  $ret = array();
   db_add_field($ret, 'petition', 'limit_date',  array(
        'description' => t('Unix timetstamp of the limit date for the campaign setting'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ));
    db_add_field($ret, 'petition', 'signature_goal',  array(
        'description' => t('Signature goal for the campaign setting'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ));
      
    db_add_field($ret, 'petition', 'campaign_settings',  array(
        'description' => t('campaign mode'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ));
    db_add_field($ret, 'petition', 'auto_inactivation', array(
        'description' => t('auto inactivation mode'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ));
      
     db_add_field($ret, 'petition_signatures', 'canbe_informed', array(
        'description' => t('Whether the petitioner accepts to be informed aout the petition campaign'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ));
      
      db_add_field($ret, 'petition_signatures', 'language', array(
        'description' => t('The language of the signed petition'),
        'type' => 'text',
        'default' => NULL,
      ));
      
      
  $table = array(
    'description' => t('Table for storing the translations of email subjects and body.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The node identifier of the translation'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'tnid' => array(
        'description' => t('The node identifier of original version'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
      ),
      'language' => array(
        'description' => t('The language code of the translation'),
        'type' => 'text',
        'default' => NULL,
      ),
      'tsubject' => array(
        'description' => t('The translated subject'),
        'type' => 'text',
        'default' => NULL,
      ),
      'tbody' => array(
        'description' => t('The translated body'),
        'type' => 'text',
        'default' => NULL,
      )
    ),
    'primary key' => array('nid'),
   );
   
   db_create_table($ret, 'petition_translation', $table);
      
      
  update_signature_count();
  return $ret;
}


function update_signature_count() {
  $result = db_query("SELECT * FROM {petition}");
  while($petition = db_fetch_object($result)) {
     //For each petition, update the signature count
     $signature_count = db_result(db_query("SELECT COUNT(cid) FROM {petition_signatures} WHERE nid = %d AND confirmed = 1", $petition->nid));
     $signature_count = is_numeric($signature_count) ? $signature_count : 0;
     db_query("UPDATE {petition} SET signatures = %d WHERE nid = %d", $signature_count, $petition->nid);
     
     //For each petition and for each signaure, update the signature position
     $signatures = db_query("SELECT * FROM {petition_signatures} WHERE nid = %d AND confirmed = 1 ORDER BY cid ASC", $petition->nid);
     $position = 0;
     while ($signature = db_fetch_object($signatures)) {
       $position += 1;
       db_query("UPDATE {petition_signatures} SET position = %d WHERE nid = %d AND cid = %d", $position, $signature->nid, $signature->cid);
     }
  
  }

}